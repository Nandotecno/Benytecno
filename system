da  importação do tkinter  * 
de  tkinter  import  ttk
import  sqlite3
da  importação datetime  * 


root  =  Tk ()

classe  Funcs ():
    def  conectabd ( self ):
        eu . conn  =  sqlite3 . conectar ( "receita_manual.db" )
        eu . cursor  =  self . con . cursor ()
    def  desconectabd ( self ):
        eu . con . fechar ()
    def  montaTabelas ( self ):
        eu . conectabd ();
        print ( "Conectando ao banco de dados" )
        ### Cria tabela servprod
        eu . cursor . execute ( "" "
            CRIAR TABELA SE NÃO EXISTIR receitas (
                cod INTEGER PRIMARY KEY,
                obs CHAR (200),
                entrada FLOAT (2,2),
                saida FLOAT (2,2),
                dia INTEGER (4),
                mes INTEIRO (4) NÃO NULO,
                ano INTEIRO (6) NÃO NULO
             );
         "" " )
        eu . con . commit ();
        print ( "banco de dados ja criado" )
        eu . desconectabd ();
        imprimir ( "desconectando ao banco de dados" )
    def  limpa_tela ( self ):
        eu . input_ano . excluir ( 0 , END )
        eu . inp_dia . excluir ( 0 , END )
        eu . inp_mes . excluir ( 0 , END )
        eu . inp_obs . excluir ( 0 , END )
        eu . inp_saida . excluir ( 0 , END )
        eu . inp_entrada . excluir ( 0 , END )

        eu . input_ano . inserir ( END , auto . hj . ano )
        eu . inp_dia . inserir ( END , self . hj . day )
        eu . inp_mes . inserir ( END , auto . hj . mês )
        eu . inp_obs . inserir ( END , "" )
        eu . inp_saida . inserir ( END , "00,00" )
        eu . inp_entrada . inserir ( END , "00,00" )

    def  variaveis ( self ):
        eu . ano  =  self . input_ano . obter ()
        eu . dia  =  self . inp_dia . obter ()
        eu . mes  =  self . inp_mes . obter ()
        eu . obs  =  self . inp_obs . obter ()
        eu . entrada  =  self . inp_entrada . obter ()
        eu . saida  =  self . inp_saida . obter ()
    def  add_mov ( self ):
        eu . conectabd ()
        eu . variaveis ()

        eu . cursor . execute ( "" "
             INSERIR EM receitas (obs, entrada, saida, dia, mes, ano)
             VALORES (?,?,?,?,?,?) "" " ,
                            ( self . obs , self . entrada , self . saida , self . dia , self . mes , self . ano ))
        eu . con . commit ()

        eu . desconectabd ()
        eu . select_lista ()
        eu . limpa_tela ()
    def  select_lista ( self ):
        mes_lista  =  self . corvar . obter ()
        ano_lista  =  self . corvar2 . obter ()

        eu . lista . delete ( * self . lista . get_children ())
        eu . conectabd ()
        lista  =  self . cursor . execute ( "" "SELECT entrada, saida, dia, mes, ano, obs DAS receitas  
            ONDE mes = '% s' e ano = '% s' ORDEM POR dia ASC; "" "  % ( mes_lista , ano_lista ))

        para  eu  na  lista :
            eu . lista . inserir ( "" , END , valores = i )

        eu . entradas_totais . excluir ( 0 , END )
        lista2  =  self . cursor . execute ( "" "SELECT SUM (entrada) DAS receitas  
                    ONDE mes = '% s' e ano = '% s' ORDEM POR dia ASC; "" "  % ( mes_lista , ano_lista ))


        para  i  na  lista2 :
            eu . entradas_totais . inserir ( END , i )

        eu . saidas_totais . excluir ( 0 , END )
        lista3  =  self . cursor . execute ( "" "SELECT SUM (saida) DAS receitas  
                            ONDE mes = '% s' e ano = '% s' ORDEM POR dia ASC; "" "  % ( mes_lista , ano_lista ))

        para  eu  na  lista3 :
            eu . saidas_totais . inserir ( END , i )

        eu . saldo_total . excluir ( 0 , END )
        lista3  =  self . cursor . execute ( "" "SELECT (SUM (entrada) - SUM (saida)) FROM receitas  
                                    ONDE mes = '% s' e ano = '% s' ORDEM POR dia ASC; "" "  % ( mes_lista , ano_lista ))

        para  eu  na  lista3 :
            eu . saldo_total . inserir ( END , i )

        eu . desconectabd ()
    def  deletaItem ( self , event ):
        eu . lista . seleção ()
        para  n  em  si mesmo . lista . seleção ():
            col1 , col2 , col3 , col4 , col5 , col6  =  self . lista . item ( n , 'valores' )
            eu . conectabd ()
            eu . cursor . execute ( "" "APAGAR DAS receitas ONDE entrada =? AND saida =?
                AND dia =? AND mes =? E ano =? E obs =? """ , ( Col1 , col2 , col3 , col4 , Col5 , col6 ))

            eu . con . commit ()
            eu . desconectabd ()
            eu . select_lista ()

 Aplicação de classe ( Funcs ):
    def  __init__ ( self ):
        eu . hj  =  data . hoje ()
        eu . root  =  root
        eu . tela ()
        eu . quadros ()
        eu . widgets ()
        eu . lista_receitas ()
        eu . montaTabelas ()
        eu . limpa_tela ()
        eu . select_lista ()
        eu . root . mainloop ()
    def  tela ( próprio ):
        eu . root . título ( "Receitas manuais - RfZorzi" )
        eu . root . configurar ( fundo =  "lightgray" );
        eu . root . geometria ( "1000x600" )
        eu . root . redimensionável ( VERDADEIRO , VERDADEIRO );
        eu . root . minize ( largura = 800 , altura = 500 )

     frames def ( self ):
        ### Primeiro Container da janela
        top  =  Quadro ( auto . raiz , bd = 2 , bg = "# 383847" , highlightbackground = 'gray65' , highlightthickness = 1 , alívio  =  'cume' )
        topo . lugar ( relx = 0,02 , confiaram = 0,02 , relwidth = 0,96 , relheight = 0,1 )
        eu . top  =  top
        ### Segundo Container da janela
        top2  =  moldura ( auto . raiz , bd = 2 , BG = '# 383847' , highlightbackground = 'gray65' , highlightthickness = 1 , alívio  =  'cume' )
        top2 . lugar ( relx = 0,52 , confiaram = 0,16 , relwidth = 0,46 , relheight = 0,1 )
        eu . top2  =  top2
        ### Terceiro Container da janela
        top3  =  Frame ( self . root , bd = 2 , bg = 'white' , destaque de fundo = 'gray65' , realce de espessura = 1 , relevo  =  'cume' )
        top3 . lugar ( relx = 0,02 , confiaram = 0,26 , relwidth = 0,96 , relheight = 0,5 )
        eu . top3  =  top3
        ### Quarto Container da janela
        TOP4  =  moldura ( auto . raiz , bd = 2 , BG = '# 383847' , highlightbackground = 'gray65' , highlightthickness = 1 , alívio  =  'cume' )
        top4 . lugar ( relx = 0,02 , confiaram = 0,78 , relwidth = 0,96 , relheight = 0,2 )
        eu . top4  =  top4
     widgets def ( self ):
        eu . lb_entrada  =  Label ( self . top , text = 'Entrada' , bg = '# 383847' , fg = 'branco' , font = ( 'dyuthi' , 10 , 'negrito' ))
        eu . lb_entrada . lugar ( relx =  0,05 , confiança = 0,15 , largura rel =  0,07 )

        eu . inp_entrada  =  Entry ( self . top , fg = 'gray35' )
        eu . inp_entrada . lugar ( relx = 0,05 , confiança = 0,5 , largura rel =  0,07 )

        eu . lb_saida  =  Marcador ( self . top , text = 'Saida' , bg = '# 383847' , fg = 'white' , font = ( 'dyuthi' , 10 , 'bold' ))
        eu . lb_saida . coloque ( relx = 0,15 , confie = 0,15 , relwidth =  0,07 )

        eu . inp_saida  =  Entry ( self . top , fg = 'gray35' )
        eu . inp_saida . coloque ( relx = 0,15 , confie = 0,5 , relwidth = 0,07 )

        eu . lb_dia  =  Label ( self . top , text  =  'Dia' , bg = '# 383847' , fg = 'lightgray' ,
                            fonte = ( 'verdana' , 9 , 'negrito' )). lugar ( relx = 0,35 , confiança = 0,15 , largura rel =  0,04 )
        eu . inp_dia  =  Entry ( self . top , fg = 'gray35' )
        eu . inp_dia . lugar ( relx = 0,35 , confiança = 0,5 , largura rel = 0,04 )

        eu . lb_mes  =  Label ( self . top , text  =  'Mês' , bg = '# 383847' , fg = 'lightgray' ,
                            fonte = ( 'verdana' , 9 , 'negrito' )). colocar ( relx = 0,4 , confiar = 0,15 , largura rel =  0,04 )
        eu . inp_mes  =  Entry ( self . top , fg = 'gray35' )
        eu . inp_mes . colocar ( relx = 0,4 , confiar = 0,5 , largura rel = 0,04 )

        eu . lb_ano  =  Rótulo ( self . top , text  =  'Ano' , bg = '# 383847' , fg = 'cinza claro' ,
                            fonte = ( 'verdana' , 10 , 'negrito' )). lugar ( relx = 0,45 , confiança = 0,15 , largura rel =  0,04 )
        eu . input_ano  =  Entry ( self . top , fg = 'gray35' )
        eu . input_ano . lugar ( relx = 0,45 , confiança = 0,5 , largura rel = 0,07 )

        eu . lb_obs  =  Label ( self . top , text  =  'Obs:' , bg = '# 0e76a8' , fg = 'lightgray' ,
                            fonte = ( 'dyuthi' , 10 , 'negrito' )). lugar ( relx = 0,55 , confiança = 0,15 , largura rel =  0,07 )
        eu . inp_obs  =  Entry ( self . top , fg = 'gray35' )
        eu . inp_obs . colocar ( relx = 0,55 , confiar = 0,5 , largura rel = 0,3 )

        eu . bt_inserir  =  Button ( self . top , text =  'Inserir' , bg =  "# 0e76a8" , bd  =  1 , destaquebackground = 'lightgray' ,
                    espessura de destaque = 1 , fg = "cinza claro" , fonte = ( 'verdana' , 12 , 'negrito' ),
                    activebackground = "# 108ecb" , activeforeground =  "branco" , comando =  self . add_mov )
        eu . bt_inserir . lugar ( relx = 0,9 , confiança = 0,2 , largura rel = 0,09 , altura real = 0,6 )
        #####
        eu . mes_listaLb  =  Rótulo ( self . top2 , text =  'Mês' , bg =  'cinza' , fg =  'cinza claro' ,
                                 fonte = ( 'Verdana' , '7' , 'negrito' ))
        eu . mes_listaLb . lugar ( relx = 0,1 , confiaram = 0,19 , relwidth = 0,2 , relheight = 0,62 )
        eu . mesListaEntry  =  Frame ( self . top2 , bd = 2 )
        eu . mesListaEntry . grade ( coluna = 0 , linha = 0 , aderente = ( N , W , E , S ))
        eu . mesListaEntry . configuração da coluna ( 0 , peso = 1 )
        eu . mesListaEntry . configuração de linha ( 0 , peso = 1 )
        eu . mesListaEntry . colocar ( relx = 0,1 , confiar = 0,1 , largura rel = 0,3 , altura real = 0,9 )
        eu . corvar  =  StringVar ( self . top2 )
        eu . coresV  = { '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' ,
                       '10' , '11' , '12' }
        eu . corvar . definir ( auto . hj . mês )
        eu . popupMenu  =  OptionMenu ( self . mesListaEntry , self . corvar , * self . coresV )
        eu . popupMenu . grade ( linha = 2 , coluna = 1 )

        eu . mesListaEntry . lugar ( relx = 0,1 , confiaram = 0,2 , relwidth = 0,2 , relheight = 0,6 )

        eu . ano_listaLb  =  Label ( self . top2 , text = 'Mês' , bg = 'cinza' , fg = 'cinza claro' ,
                                 fonte = ( 'Verdana' , '7' , 'negrito' ))
        eu . ano_listaLb . coloque ( relx = 0,4 , confie = 0,19 , relwidth = 0,15 , relheight = 0,62 )
        eu . anoListaEntry  =  Frame ( self . top2 , bd = 2 )
        eu . anoListaEntry . grade ( coluna = 0 , linha = 0 , aderente = ( N , W , E , S ))
        eu . anoListaEntry . configuração da coluna ( 0 , peso = 1 )
        eu . anoListaEntry . configuração de linha ( 0 , peso = 1 )
        eu . anoListaEntry . lugar ( relx = 0,4 , confiança = 0,1 , largura rel = 0,2 , altura rel = 0,9 )
        eu . corvar2  =  StringVar ( self . top2 )
        eu . coresV2  = { '2020' , '2021' , '2022' }
        eu . corvar2 . conjunto ( auto . hj . ano )
        eu . popupMenu  =  OptionMenu ( self . anoListaEntry , self . corvar2 , * self . coresV2 )
        eu . popupMenu . grade ( linha = 2 , coluna = 1 )

        eu . anoListaEntry . lugar ( relx = 0,4 , confiança = 0,2 , largura rel = 0,18 , altura rel = 0,64 )

        eu . bt_select_month  =  Botão ( self . top2 , text = 'Seleciona' , bg = "# 0e76a8" , bd = 1 , destaquebackground = 'cinza claro' ,
                realce espessura = 1 , fg = "cinza claro" , fonte = ( 'verdana' , 12 , 'negrito' ), fundo ativo = "# 108ecb" ,
                activeforeground = "branco" , comando  =  self . select_lista )
        eu . bt_select_month . coloque ( relx = 0,65 , confie = 0,2 , relwidth = 0,3 , relheight = 0,6 )

        eu . entradas_totaisLb  =  Label ( self . top4 , text =  'Total de entrada' )
        eu . entradas_totaisLb . lugar ( relx = 0,08 , confiança = 0,1 , largura rel = 0,12 )
        eu . entradas_totais  =  Entrada ( auto . top4 )
        eu . entradas_totais . lugar ( relx = 0,08 , confiança = 0,3 , largura rel =  0,12 )

        eu . saidas_totaisLb  =  Marcador ( self . top4 , text  =  'Total Saida' )
        eu . saidas_totaisLb . coloque ( relx = 0,23 , confie = 0,1 , relwidth = 0,12 )
        eu . saidas_totais  =  Entry ( self . top4 )
        eu . saidas_totais . coloque ( relx = 0,23 , confie = 0,3 , relwidth = 0,12 )

        eu . saldo_totalLb  =  Label ( self . top4 , text =  'Saldo' )
        eu . saldo_totalLb . lugar ( relx = 0,68 , confiança = 0,1 , largura rel = 0,12 )
        eu . saldo_total  =  Entry ( self . top4 )
        eu . saldo_total . coloque ( relx = 0,68 , confie = 0,3 , relwidth = 0,12 )
    def  lista_receitas ( self ):
        eu . barra  =  Barra de rolagem ( self . top3 , orient = 'vertical' ) #, command = self.OnVsb_Orc2)
        eu . barra . lugar ( relx = 0,98 , confiaram = 0,01 , relwidth = 0,02 , relheight = 0,97 )

        eu . lista  =  ttk . Treeview ( self . Top3 , height = 10 , yscrollcommand = self . Barra . Set ,
                                           coluna = ( "col1" , "col2" , "col3" , "col4" , "col5" , "col6" ))

        eu . lista . título ( "# 0" , texto = "" )
        eu . lista . título ( "# 1" , texto = "Entrada" )
        eu . lista . título ( "# 2" , texto = "Saida" )
        eu . lista . título ( "# 3" , texto = "Dia" )
        eu . lista . título ( "# 4" , texto = "Mes" )
        eu . lista . título ( "# 5" , texto = "Ano" )
        eu . lista . título ( "# 6" , texto = "Obs" )

        eu . lista . coluna ( "# 0" , largura = 1 )
        eu . lista . coluna ( "# 1" , largura = 100 )
        eu . lista . coluna ( "# 2" , largura = 100 )
        eu . lista . coluna ( "# 3" , largura = 40 )
        eu . lista . coluna ( "# 4" , largura = 40 )
        eu . lista . coluna ( "# 5" , largura = 60 )
        eu . lista . coluna ( "# 6" , largura = 210 )

        eu . lista . lugar ( relx = 0,0 , confiaram = 0,01 , relwidth = 0,98 , relheight = 0,94 )

        eu . lista . configurar ( yscroll = self . barra . set )

        # self.lista.bind ('<Double-1>', self.altera_itens_orc)
        # self.lista.bind ('<Return>', self.altera_itens_orc)
        eu . lista . bind ( '<Delete>' , self . deletaItem )


Aplicação ()
